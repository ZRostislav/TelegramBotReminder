require('dotenv').config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

const { Telegraf } = require('telegraf');
const cron = require('node-cron');
const fs = require('fs');
const express = require('express');

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHAT_ID = process.env.CHAT_ID;

const bot = new Telegraf(BOT_TOKEN);
const DATA_FILE = 'database.json';

// üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
  try {
    return JSON.parse(fs.readFileSync(DATA_FILE));
  } catch {
    return { poll_id: null, answers: {} };
  }
}

// üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData(data) {
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

// üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è cron –∏ –∫–æ–º–∞–Ω–¥–∞ /sendpoll)
async function sendPoll() {
  const message = await bot.telegram.sendPoll(
    CHAT_ID,
    '–¢—ã –±—É–¥–µ—à—å –Ω–∞ —Å–ª—É–∂–µ–Ω–∏–∏ –∑–∞–≤—Ç—Ä–∞?',
    ['–î–∞', '–ù–µ—Ç'],
    { is_anonymous: false }
  );

  const data = { poll_id: message.poll.id, answers: {} };
  saveData(data);

  await bot.telegram.sendMessage(CHAT_ID, '@all –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –æ–ø—Ä–æ—Å –≤—ã—à–µ üôè');
}

// üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å
bot.on('poll_answer', (ctx) => {
  const data = loadData();
  const user = ctx.update.poll_answer.user;
  data.answers[user.id] = {
    name: `${user.first_name} ${user.last_name || ''}`.trim(),
    option_ids: ctx.update.poll_answer.option_ids
  };
  saveData(data);
});

// üì£ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–Ω–≥ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
async function sundayPing() {
  const data = loadData();
  const answers = data.answers || {};
  const answeredYes = [];
  const nonRespondents = [];

  try {
    const members = await bot.telegram.getChatAdministrators(CHAT_ID);
    for (const admin of members) {
      const user = admin.user;
      if (user.is_bot) continue;

      const id = user.id.toString();
      if (!answers[id]) {
        nonRespondents.push(user.username ? `@${user.username}` : user.first_name);
      } else if (answers[id].option_ids.includes(0)) {
        answeredYes.push(user.username ? `@${user.username}` : answers[id].name);
      }
    }

    let text = '‚õ™ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n';
    if (answeredYes.length) {
      text += '‚úÖ –ö—Ç–æ —Å–æ–±–∏—Ä–∞–ª—Å—è –±—ã—Ç—å: ' + answeredYes.join(', ') + '\n';
    }
    if (nonRespondents.length) {
      text += '‚ùó –ö—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª: ' + nonRespondents.join(', ');
    }

    await bot.telegram.sendMessage(CHAT_ID, text);
  } catch (e) {
    await bot.telegram.sendMessage(CHAT_ID, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${e.message}`);
  }
}

//
// ========== –ö–æ–º–∞–Ω–¥—ã ==========
//

// üëã /start
bot.start((ctx) =>
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–±—Ä–∞–Ω–∏–µ–º. –í —Å—É–±–±–æ—Ç—É –±—É–¥–µ—Ç –æ–ø—Ä–æ—Å, –∞ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.')
);

// üìä /status ‚Äî –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å
bot.command('status', (ctx) => {
  const data = loadData();
  const total = Object.keys(data.answers).length;
  const yes = Object.values(data.answers).filter(a => a.option_ids.includes(0)).length;

  ctx.reply(`üìä –û—Ç–≤–µ—Ç–∏–ª–∏: ${total}\n‚úÖ –°–∫–∞–∑–∞–ª–∏ "–î–∞": ${yes}`);
});

// üìã /answers ‚Äî –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
bot.command('answers', (ctx) => {
  const data = loadData();
  const entries = Object.values(data.answers);

  if (!entries.length) {
    return ctx.reply('–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.');
  }

  let text = 'üìã –û—Ç–≤–µ—Ç—ã:\n';
  for (const entry of entries) {
    const choice = entry.option_ids.includes(0) ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç';
    text += `‚Ä¢ ${entry.name} ‚Äî ${choice}\n`;
  }

  ctx.reply(text);
});

// üßπ /clear ‚Äî —Å–±—Ä–æ—Å –±–∞–∑—ã
bot.command('clear', (ctx) => {
  const cleared = { poll_id: null, answers: {} };
  saveData(cleared);
  ctx.reply('–ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –æ–ø—Ä–æ—Å—É.');
});

// üì® /sendpoll ‚Äî —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞
bot.command('sendpoll', async (ctx) => {
  try {
    const message = await bot.telegram.sendPoll(
      CHAT_ID,
      '–¢—ã –±—É–¥–µ—à—å –Ω–∞ —Å–ª—É–∂–µ–Ω–∏–∏ –∑–∞–≤—Ç—Ä–∞?',
      ['–î–∞', '–ù–µ—Ç'],
      { is_anonymous: false }
    );

    const data = { poll_id: message.poll.id, answers: {} };
    saveData(data);

    await bot.telegram.sendMessage(CHAT_ID, '@all –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –æ–ø—Ä–æ—Å –≤—ã—à–µ üôè');
    ctx.reply('‚úÖ –û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
  } catch (e) {
    ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: ${e.message}`);
  }
});

//
// ========== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ==========
//

cron.schedule('0 18 * * 6', sendPoll, { timezone: 'Europe/Chisinau' }); // –°—É–±–±–æ—Ç–∞ 18:00
cron.schedule('0 8 * * 0', sundayPing, { timezone: 'Europe/Chisinau' }); // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 08:00

//
// ========== HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ==========
//

const app = express();
app.get('/', (req, res) => res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'));
app.listen(8000, () => console.log('HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000'));

//
// ========== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ==========
//

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
